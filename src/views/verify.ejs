<%- include('partials/header', { title: 'Email Verification - Gemini Bank' }) %>

<style>
    /* --- State-of-the-Art OTP Verification UI --- */
    :root {
        --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        --success-gradient: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
        --error-color: #ff6b6b;
        --warning-color: #ffa726;
        --text-color-light: #ffffff;
        --text-color-muted: rgba(255, 255, 255, 0.75);
        --card-bg: rgba(255, 255, 255, 0.08);
        --card-border: rgba(255, 255, 255, 0.2);
    }

    .verification-container {
        min-height: 85vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 2rem 1rem;
        position: relative;
        overflow: hidden;
    }

    /* Card Styling */
    .premium-verification-card {
        background: var(--card-bg);
        backdrop-filter: blur(25px);
        border: 1px solid var(--card-border);
        border-radius: 28px;
        box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2), inset 0 1px 0 rgba(255, 255, 255, 0.1);
        padding: 3rem;
        text-align: center;
        width: 100%;
        max-width: 480px;
        position: relative;
        overflow: hidden;
        animation: cardEntrance 1s cubic-bezier(0.165, 0.84, 0.44, 1) both;
        transition: transform 0.4s ease, box-shadow 0.4s ease;
    }

    @keyframes cardEntrance {
        from {
            opacity: 0;
            transform: translateY(50px) scale(0.9);
        }
        to {
            opacity: 1;
            transform: translateY(0) scale(1);
        }
    }

    .premium-verification-card:hover {
        transform: translateY(-8px);
        box-shadow: 0 40px 80px rgba(0, 0, 0, 0.3), inset 0 1px 0 rgba(255, 255, 255, 0.1);
    }
    
    @keyframes shake {
        0%, 100% { transform: translateX(0); }
        10%, 50%, 90% { transform: translateX(-5px); }
        30%, 70% { transform: translateX(5px); }
    }

    .shake {
        animation: shake 0.5s ease-in-out;
    }

    /* Header Content */
    .verification-header {
        margin-bottom: 2rem;
        opacity: 0;
        animation: contentFadeIn 1s ease 0.5s forwards;
    }
    
    .verification-title {
        font-size: 2.2rem;
        font-weight: 800;
        color: var(--text-color-light);
        line-height: 1.2;
        margin-bottom: 0.75rem;
    }

    .verification-subtitle {
        color: var(--text-color-muted);
        font-size: 1rem;
        max-width: 350px;
        margin: 0 auto;
    }

    .email-highlight {
        font-weight: 600;
        color: #8a9ff0; /* Lighter version of primary for better readability */
    }
    
    @keyframes contentFadeIn {
        to { opacity: 1; }
    }

    /* --- New Single OTP Input --- */
    .otp-input-container {
        position: relative;
        display: flex;
        justify-content: center;
        gap: 10px;
        margin: 2.5rem 0;
        opacity: 0;
        animation: contentFadeIn 1s ease 0.7s forwards;
    }

    .otp-digit-box {
        width: 50px;
        height: 60px;
        border-radius: 12px;
        border: 1px solid var(--card-border);
        background: rgba(0, 0, 0, 0.2);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.8rem;
        font-weight: 700;
        color: var(--text-color-light);
        transition: all 0.3s ease;
        transform-style: preserve-3d;
    }
    
    .otp-digit-box.filled {
        border-color: #8a9ff0;
        animation: flipIn 0.5s ease forwards;
    }
    
    @keyframes flipIn {
        from { transform: rotateX(-90deg); opacity: 0; }
        to { transform: rotateX(0deg); opacity: 1; }
    }

    .otp-digit-box.cursor::after {
        content: '';
        position: absolute;
        width: 2px;
        height: 40%;
        background: #8a9ff0;
        animation: blink 1.2s infinite ease-in-out;
    }
    
    .otp-input-container.error .otp-digit-box.filled {
        border-color: var(--error-color);
        color: var(--error-color);
    }
    
    @keyframes blink {
        0%, 100% { opacity: 1; }
        50% { opacity: 0; }
    }

    /* The actual input field, layered on top but invisible */
    #otp-input {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        border: none;
        background: transparent;
        color: transparent;
        caret-color: transparent;
        letter-spacing: 28px; /* Adjust based on box + gap width */
        font-size: 2rem;
        padding-left: 15px; /* Center the first character */
    }

    /* Timer & Resend */
    .timer-display {
        margin-bottom: 2rem;
        color: var(--text-color-muted);
        opacity: 0;
        animation: contentFadeIn 1s ease 0.9s forwards;
    }

    #countdown {
        font-weight: 700;
        font-size: 1.1rem;
        color: var(--text-color-light);
        margin-left: 8px;
        padding: 4px 8px;
        border-radius: 6px;
        background: rgba(0, 0, 0, 0.2);
        transition: color 0.3s ease;
    }
    
    #countdown.warning { color: var(--warning-color); }
    #countdown.expired { color: var(--error-color); }

    .resend-button {
        background: none;
        border: none;
        color: #8a9ff0;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        padding: 0;
    }
    
    .resend-button:hover:not(:disabled) {
        color: #fff;
        text-shadow: 0 0 10px #fff;
    }

    .resend-button:disabled {
        color: var(--text-color-muted);
        cursor: not-allowed;
        opacity: 0.6;
    }
    
    /* Premium Button */
    .btn-premium-verify {
        width: 100%;
        padding: 1rem;
        font-size: 1rem;
        font-weight: 700;
        letter-spacing: 0.5px;
        border: none;
        border-radius: 14px;
        background: var(--primary-gradient);
        color: white;
        cursor: pointer;
        position: relative;
        overflow: hidden;
        transition: all 0.4s ease;
        box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
        opacity: 0;
        animation: contentFadeIn 1s ease 1.1s forwards;
    }

    .btn-premium-verify:hover:not(:disabled) {
        transform: translateY(-3px);
        box-shadow: 0 15px 30px rgba(102, 126, 234, 0.4);
    }
    
    .btn-premium-verify:disabled {
        background: rgba(255, 255, 255, 0.1);
        box-shadow: none;
        cursor: not-allowed;
    }
    
    /* Success State */
    .success-container {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        background: var(--card-bg); /* Match card for seamless transition */
        opacity: 0;
        transition: opacity 0.5s ease;
        pointer-events: none;
    }

    .success-container.visible {
        opacity: 1;
        pointer-events: all;
    }

    .success-checkmark {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        display: block;
        stroke-width: 3;
        stroke: #fff;
        stroke-miterlimit: 10;
        box-shadow: inset 0px 0px 0px #43e97b;
        animation: fill 0.4s ease-in-out 0.4s forwards, scale .3s ease-in-out .9s both;
    }
    .success-checkmark__circle {
        stroke-dasharray: 166;
        stroke-dashoffset: 166;
        stroke-width: 3;
        stroke-miterlimit: 10;
        stroke: #43e97b;
        fill: none;
        animation: stroke 0.6s cubic-bezier(0.65, 0, 0.45, 1) forwards;
    }
    .success-checkmark__check {
        transform-origin: 50% 50%;
        stroke-dasharray: 48;
        stroke-dashoffset: 48;
        animation: stroke 0.3s cubic-bezier(0.65, 0, 0.45, 1) 0.8s forwards;
    }
    @keyframes stroke { 100% { stroke-dashoffset: 0; } }
    @keyframes scale { 0%, 100% { transform: none; } 50% { transform: scale3d(1.1, 1.1, 1); } }
    @keyframes fill { 100% { box-shadow: inset 0px 0px 0px 40px #43e97b; } }

    /* Toast Notifications (from previous step, unchanged) */
    /* .toast-notification styles removed to avoid empty ruleset error */
</style>

<div class="verification-container">
    <div class="premium-verification-card" id="verificationCard">
        
        <div id="formContainer">
            <div class="verification-header">
                <h1 class="verification-title">Email Verification</h1>
                <p class="verification-subtitle">
                    Enter the 6-digit code sent to 
                    <span class="email-highlight"><%= email %></span>.
                </p>
            </div>

            <form id="verificationForm">
                <input type="hidden" name="email" value="<%= email %>" id="emailInput">
                
                <div class="otp-input-container" id="otpContainer">
                    <div class="otp-digit-box" data-index="0"></div>
                    <div class="otp-digit-box" data-index="1"></div>
                    <div class="otp-digit-box" data-index="2"></div>
                    <div class="otp-digit-box" data-index="3"></div>
                    <div class="otp-digit-box" data-index="4"></div>
                    <div class="otp-digit-box" data-index="5"></div>

                    <input type="tel" id="otp-input" name="otp" maxlength="6" inputmode="numeric" autocomplete="one-time-code" required>
                </div>

                <div class="timer-display">
                    Didn't get a code? 
                    <button type="button" class="resend-button" id="resendBtn" disabled>Resend</button>
                    <span id="timerWrapper">in <span class="timer-countdown" id="countdown">05:00</span></span>
                </div>
                
                <button type="submit" class="btn-premium-verify" id="verifyBtn" disabled>
                    <i class="fas fa-check-circle me-2"></i>Verify Account
                </button>
            </form>
        </div>

        <div class="success-container" id="successContainer">
            <svg class="success-checkmark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52">
                <circle class="success-checkmark__circle" cx="26" cy="26" r="25" fill="none"/>
                <path class="success-checkmark__check" fill="none" d="M14.1 27.2l7.1 7.2 16.7-16.8"/>
            </svg>
            <h1 class="verification-title mt-4">Verified!</h1>
            <p class="verification-subtitle">Your account is secure. Redirecting...</p>
        </div>
    </div>
</div>

<div class="toast-container" id="toastContainer"></div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    // --- Element References ---
    const otpInput = document.getElementById('otp-input');
    const digitBoxes = document.querySelectorAll('.otp-digit-box');
    const otpContainer = document.getElementById('otpContainer');
    const verifyBtn = document.getElementById('verifyBtn');
    const resendBtn = document.getElementById('resendBtn');
    const countdownEl = document.getElementById('countdown');
    const timerWrapper = document.getElementById('timerWrapper');
    const verificationCard = document.getElementById('verificationCard');
    const formContainer = document.getElementById('formContainer');
    const successContainer = document.getElementById('successContainer');
    const email = document.getElementById('emailInput').value;

    let timeLeft = 300; // 5 minutes
    let timerInterval;

    // --- Utility: Toast Notifications ---
    const showToast = (message, type = 'info') => { /* ... (Same as previous step) ... */ };

    // --- Utility: Button Loading State ---
    const setLoadingState = (button, isLoading, originalText) => { /* ... (Same as previous step) ... */ };

    // --- Timer Logic ---
    const startTimer = () => {
        clearInterval(timerInterval);
        timeLeft = 300;
        resendBtn.disabled = true;
        timerWrapper.style.display = 'inline';
        
        timerInterval = setInterval(() => {
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            
            countdownEl.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            countdownEl.classList.toggle('warning', timeLeft <= 60 && timeLeft > 0);
            countdownEl.classList.remove('expired');

            if (timeLeft <= 0) {
                clearInterval(timerInterval);
                timerWrapper.style.display = 'none';
                resendBtn.disabled = false;
                countdownEl.classList.add('expired');
                verifyBtn.disabled = true;
                showToast('OTP has expired. Please request a new one.', 'error');
            }
            timeLeft--;
        }, 1000);
    };

    // --- New OTP Input Handling ---
    otpInput.addEventListener('input', () => {
        const value = otpInput.value;
        digitBoxes.forEach((box, index) => {
            if (index < value.length) {
                box.textContent = value[index];
                box.classList.add('filled');
            } else {
                box.textContent = '';
                box.classList.remove('filled');
            }
            // Update cursor position
            box.classList.toggle('cursor', index === value.length);
        });
        
        // Enable/disable verify button
        verifyBtn.disabled = value.length !== 6 || timeLeft <= 0;
        otpContainer.classList.remove('error');
    });
    
    // Set initial cursor
    digitBoxes[0].classList.add('cursor');

    // --- Success Animation ---
    const showSuccessAnimation = () => {
        clearInterval(timerInterval);
        formContainer.style.transition = 'opacity 0.5s ease';
        formContainer.style.opacity = '0';
        successContainer.classList.add('visible');
        setTimeout(() => window.location.href = '/dashboard', 3000);
    };

    // --- Form Submission (Verification) ---
    document.getElementById('verificationForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        if (otpInput.value.length !== 6) return;

        setLoadingState(verifyBtn, true, 'Verifying...');
        
        try {
            const response = await fetch('/user/verify', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ email, otp: otpInput.value })
            });
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Invalid OTP');
            }
            showSuccessAnimation();
        } catch (error) {
            verificationCard.classList.add('shake');
            otpContainer.classList.add('error');
            setTimeout(() => verificationCard.classList.remove('shake'), 500);
            showToast(error.message, 'error');
            otpInput.value = '';
            otpInput.dispatchEvent(new Event('input')); // Trigger update
        } finally {
            if (!successContainer.classList.contains('visible')) {
                setLoadingState(verifyBtn, false, '<i class="fas fa-check-circle me-2"></i>Verify Account');
            }
        }
    });

    // --- Resend OTP Logic ---
    resendBtn.addEventListener('click', async () => {
        setLoadingState(resendBtn, true, 'Resending...');
        try {
            const response = await fetch('/user/resend-otp', { /* ... */ });
            if (!response.ok) throw new Error('Could not resend code.');

            showToast('A new OTP has been sent.', 'success');
            otpInput.value = '';
            otpInput.dispatchEvent(new Event('input'));
            otpInput.focus();
            startTimer();
        } catch (error) {
            showToast(error.message, 'error');
        } finally {
            setLoadingState(resendBtn, false, 'Resend');
        }
    });

    // --- Initializations ---
    startTimer();
    // Focus the invisible input when the container is clicked
    otpContainer.addEventListener('click', () => otpInput.focus());
    otpInput.focus();
});
</script>