<%- include('partials/header') %>

<style>
    /* --- State-of-the-Art Joint Dashboard UI --- */
    :root {
        --dark-bg: #10101a;
        --glass-bg: rgba(26, 26, 46, 0.7);
        --glass-border: rgba(255, 255, 255, 0.1);
        --text-light: #f0f0f0;
        --text-muted: #a0a0b0;
        --primary-accent: #667eea;
        --primary-glow: rgba(102, 126, 234, 0.3);
        --success-color: #43e97b;
        --danger-color: #ff6b6b;
    }

    body {
        background-color: var(--dark-bg);
        color: var(--text-light);
        font-family: 'Inter', sans-serif;
    }

    /* --- Page Header --- */
    .dashboard-header {
        border-bottom: 1px solid var(--glass-border);
        padding-bottom: 1.5rem;
        animation: fadeInDown 0.8s ease-out;
    }

    .dashboard-header h1 {
        font-weight: 700;
        font-size: 2rem;
    }

    .header-actions .btn {
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid var(--glass-border);
        color: var(--text-light);
        transition: all 0.3s ease;
    }

    .header-actions .btn:hover {
        background: var(--glass-bg);
        border-color: var(--primary-accent);
        transform: translateY(-2px);
    }

    /* --- Glass Card Style --- */
    .glass-card {
        background: var(--glass-bg);
        backdrop-filter: blur(20px);
        border: 1px solid var(--glass-border);
        border-radius: 1rem;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
        animation: fadeInUp 0.8s ease-out forwards;
        opacity: 0;
    }
    
    .card-header {
        background: transparent;
        border-bottom: 1px solid var(--glass-border);
        font-weight: 600;
        font-size: 1.1rem;
        padding: 1rem 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    /* --- Left Column Cards --- */
    .balance-card .balance-label {
        color: var(--text-muted);
        font-size: 1rem;
    }
    .balance-card .balance-amount {
        font-size: 2.5rem;
        font-weight: 800;
        color: var(--text-light);
    }
     .balance-card .account-number {
        font-family: 'SF Mono', monospace;
        background: rgba(0, 0, 0, 0.2);
        padding: 0.4rem 0.8rem;
        border-radius: 6px;
        color: var(--text-muted);
    }

    .members-list .list-group-item {
        background: transparent;
        border-color: var(--glass-border);
        color: var(--text-light);
        font-weight: 500;
    }
    .members-list .list-group-item i {
        color: var(--primary-accent);
    }

    /* Transaction Tabs */
    .transaction-tabs .nav-link {
        color: var(--text-muted);
        border: none;
        border-bottom: 2px solid transparent;
        transition: all 0.3s ease;
        flex: 1;
        text-align: center;
        font-weight: 600;
    }
    .transaction-tabs .nav-link.active {
        color: var(--primary-accent);
        background: none;
        border-bottom-color: var(--primary-accent);
    }
    .transaction-tabs .form-control {
        background: rgba(0, 0, 0, 0.2);
        border: 1px solid var(--glass-border);
        color: var(--text-light);
    }
    .transaction-tabs .form-control:focus {
        background: rgba(0, 0, 0, 0.3);
        border-color: var(--primary-accent);
        box-shadow: 0 0 0 3px var(--primary-glow);
    }

    /* --- Table Styles --- */
    .table { color: var(--text-light); }
    .table thead th {
        color: var(--text-muted);
        border-bottom: 1px solid var(--glass-border);
    }
    .table td, .table th {
        border-top: 1px solid var(--glass-border);
        vertical-align: middle;
    }
    .table-hover tbody tr:hover {
        background-color: rgba(255, 255, 255, 0.03);
    }
    .status-badge {
        padding: 0.4em 0.8em;
        border-radius: 20px;
        font-weight: 600;
        font-size: 0.8rem;
        background-color: var(--glass-border);
    }

    /* --- Animations --- */
    @keyframes fadeInUp {
        from { transform: translateY(30px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
    }
    @keyframes fadeInDown {
        from { transform: translateY(-20px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
    }
</style>

<div class="container-fluid py-4 px-lg-5">
    <div class="d-flex justify-content-between align-items-center mb-5 dashboard-header">
        <h1><i class="fas fa-users me-3"></i>Joint Account Dashboard</h1>
        <div class="header-actions d-flex gap-2">
            <a href="/account/dashboard" class="btn btn-sm"><i class="fas fa-user me-2"></i>Primary Dashboard</a>
            <a href="/user/logout" class="btn btn-sm"><i class="fas fa-sign-out-alt me-2"></i>Logout</a>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-4 mb-4">
            <div class="glass-card mb-4 balance-card" style="animation-delay: 0.1s;">
                <div class="card-body text-center p-4">
                    <p class="balance-label">Current Balance</p>
                    <h2 class="balance-amount" id="balanceAmount">$<%= parseFloat(account.balance).toFixed(2) %></h2>
                    <p class="account-number mt-2">
                        <i class="fas fa-hashtag fa-xs me-1"></i><%= account.account_number %>
                    </p>
                </div>
            </div>

            <div class="glass-card mb-4 members-list" style="animation-delay: 0.2s;">
                <div class="card-header"><i class="fas fa-user-friends"></i> Account Members</div>
                <ul class="list-group list-group-flush">
                    <% members.forEach(member => { %>
                        <li class="list-group-item"><i class="fas fa-user-check me-2"></i><%= member.first_name %> <%= member.last_name %></li>
                    <% }); %>
                </ul>
            </div>
            
            <div class="glass-card transaction-tabs" style="animation-delay: 0.3s;">
                <div class="card-header"><i class="fas fa-exchange-alt"></i> Actions</div>
                <div class="card-body p-3">
                    <ul class="nav nav-tabs nav-fill" role="tablist">
                        <li class="nav-item"><button class="nav-link active" data-bs-toggle="tab" data-bs-target="#deposit-tab">Deposit</button></li>
                        <li class="nav-item"><button class="nav-link" data-bs-toggle="tab" data-bs-target="#withdraw-tab">Withdraw</button></li>
                        <li class="nav-item"><button class="nav-link" data-bs-toggle="tab" data-bs-target="#transfer-tab">Transfer</button></li>
                    </ul>
                    <div class="tab-content p-3">
                        <div class="tab-pane fade show active" id="deposit-tab">
                             <form action="/account/joint/deposit" method="POST">
                                <input type="hidden" name="accountId" value="<%= account.account_id %>">
                                <div class="mb-3"><input type="number" class="form-control" name="amount" placeholder="Amount to Deposit" step="0.01" required></div>
                                <button type="submit" class="btn btn-primary w-100">Confirm Deposit</button>
                            </form>
                        </div>
                        <div class="tab-pane fade" id="withdraw-tab">
                             <form action="/account/joint/withdraw" method="POST">
                                <input type="hidden" name="accountId" value="<%= account.account_id %>">
                                <div class="mb-3"><input type="number" class="form-control" name="amount" placeholder="Amount to Withdraw" step="0.01" required></div>
                                <button type="submit" class="btn btn-warning w-100">Confirm Withdrawal</button>
                            </form>
                        </div>
                        <div class="tab-pane fade" id="transfer-tab">
                             <form action="/account/joint/transfer" method="POST">
                                <input type="hidden" name="fromAccountId" value="<%= account.account_id %>">
                                <div class="mb-3"><input type="text" class="form-control" name="toAccountNumber" placeholder="Recipient Account #" required></div>
                                <div class="mb-3"><input type="number" class="form-control" name="amount" placeholder="Amount to Transfer" step="0.01" required></div>
                                <button type="submit" class="btn btn-info w-100">Send Transfer</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-lg-8">
            <div class="glass-card mb-4" style="animation-delay: 0.4s;">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <span><i class="fas fa-file-invoice-dollar"></i> Loan Applications</span>
                    <a href="/account/joint/loans/apply" class="btn btn-sm btn-outline-primary">Apply for Loan</a>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead><tr><th>Date</th><th>Type</th><th>Amount</th><th>Status</th></tr></thead>
                            <tbody>
                                <% if (loans.length === 0) { %>
                                    <tr><td colspan="4" class="text-center text-muted py-5">No loan applications found.</td></tr>
                                <% } else { loans.forEach(loan => { %>
                                    <tr>
                                        <td><%= new Date(loan.request_date).toLocaleDateString() %></td>
                                        <td><%= loan.loan_type %></td>
                                        <td>$<%= parseFloat(loan.amount).toFixed(2) %></td>
                                        <td><span class="status-badge text-<%= loan.status === 'APPROVED' ? 'success' : (loan.status === 'REJECTED' ? 'danger' : 'warning') %>"><%= loan.status %></span></td>
                                    </tr>
                                <% }); } %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <div class="glass-card" style="animation-delay: 0.5s;">
                <div class="card-header"><i class="fas fa-history"></i> Recent Transactions</div>
                 <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead><tr><th>Date & Time</th><th>Type</th><th>Amount</th></tr></thead>
                            <tbody>
                                <% if (transactions.length === 0) { %>
                                    <tr><td colspan="3" class="text-center text-muted py-5">No transactions yet.</td></tr>
                                <% } else { transactions.forEach(tx => { %>
                                    <tr>
                                        <td><%= new Date(tx.timestamp).toLocaleString() %></td>
                                        <td><%= tx.transaction_type %></td>
                                        <td class="fw-bold text-<%= tx.from_account_id === account.account_id ? 'danger' : 'success' %>">
                                            <%= tx.from_account_id === account.account_id ? '-' : '+' %> $<%= parseFloat(tx.amount).toFixed(2) %>
                                        </td>
                                    </tr>
                                <% }); } %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    // --- Balance Count-Up Animation ---
    const balanceEl = document.getElementById('balanceAmount');
    if (balanceEl) {
        const finalBalance = parseFloat('<%= account.balance %>');
        let currentBalance = 0;
        const increment = finalBalance / 100; // Animate in 100 steps

        const timer = setInterval(() => {
            currentBalance += increment;
            if (currentBalance >= finalBalance) {
                currentBalance = finalBalance;
                clearInterval(timer);
            }
            balanceEl.textContent = `$${currentBalance.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
        }, 15); // Update every 15ms for smooth animation
    }
});
</script>

<%- include('partials/footer') %>